//模仿qsort的功能实现一个通用的冒泡排序
//第一个参数: 待排序数组的首元素地址
//第二个参数: 待排序数组的元素个数
//第三个参数: 数组中的每个元素的大小 -- 以字节为单位
//第四个参数: 函数指针 -- 比较两个元素的函数的地址 ， 该函数由使用者自己实现
//           该函数指针的两个参数是： 待比较的两个元素的地址

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct stu{
    char name[20];
    int age;
};

void Bubble_qsort(void *base,int size,int width,float (*cmp)(const void *elem1,const void *elem2));
void swaq(char *e1,char *e2,int width);
float cmp_intArr(const void *e1,const void *e2);
float cmp_floatArr(const void *e1,const void *e2);
float cmp_stu_ByAge(const void *e1,const void *e2);
float cmp_stu_ByName(const void *e1,const void *e2);
void test_Bubblw_qsort_int();
void test_Bubblw_qsort_float();
void test_Bubblw_qsort_stuByAge();
void test_Bubblw_qsort_stuByName();

int main(){
    // test_Bubblw_qsort_int();
    // test_Bubblw_qsort_float();
    // test_Bubblw_qsort_stuByAge();
    // test_Bubblw_qsort_stuByName();
    return 0;
}

void Bubble_qsort(void *base,int size,int width,float (*cmp)(const void *elem1,const void *elem2)){
    int i=0;
    for(i=0;i<size;i++){
        printf("%d\n",i);
        int j=0;
        for(j=0;j<size-1-i;j++){
            //比较
            if( cmp((char *)base+width*j , (char*)base+width*(j+1)) >0.0){
                swaq( (char*)base+width*j, (char*)base +width*(j+1),width);
            }
        }
    }
}
void swaq(char *e1,char *e2,int width){
    int i=0;
    for(i=0;i<width;i++){
        char temp = *e1;
        *e1++ = *e2;
        *e2++ = temp;
    }
}
float cmp_intArr(const void *e1,const void *e2){
    return *(int *)e1 - *(int *)e2;
}
float cmp_floatArr(const void *e1,const void *e2){
    return *(float *)e1 - *(float *)e2;
}
float cmp_stu_ByAge(const void *e1,const void *e2){
    return ((struct stu*)e1)->age - ((struct stu *)e2)->age;
}
float cmp_stu_ByName(const void *e1,const void *e2){
    return strcmp( ((struct stu *)e1)->name , ((struct stu *)e2)->name );
}
void test_Bubblw_qsort_int(){
    int arr[10] = {10,9,8,7,6,0,4,3,2,1};
    int width = sizeof(arr[0]);
    int size = sizeof(arr)/width;
    Bubble_qsort(arr,size,width,cmp_intArr);
    printf("排序int类型的数组:\n");
    int i=0;
    for(i=0;i<size;i++){
        printf("%d ",arr[i]);
    }
    printf("\n");
}
void test_Bubblw_qsort_float(){
    float arr[] = { 9.0, 8.0, 5.0, 2.0, 1.32,3.8 };
    int width = sizeof(arr[0]);
    int size = sizeof(arr)/width;
    Bubble_qsort(arr,size,width,cmp_floatArr);
    printf("排序float类型的数组:\n");
    int i=0;
    for(i=0;i<size;i++){
        printf("%f ",arr[i]);
    }
    printf("\n");
}
void test_Bubblw_qsort_stuByAge(){
    struct stu s[] = { {"yinyapeng",21} , {"liwanqiang",20} , 
                        {"renjiaxin",25},{"hanyuhong",23},{"xujiyao",19}};
    int width = sizeof(s[0]);
    int size = sizeof(s)/width;
    Bubble_qsort(s,size,width,cmp_stu_ByAge);
    printf("排序自定义结构体stu类型的数组(按年龄):\n");
    int i=0;
    for(i=0;i<size;i++){
        printf("%d,%-20s%d\n",i+1,s[i].name,s[i].age);
    }
    printf("\n");
}
void test_Bubblw_qsort_stuByName(){
