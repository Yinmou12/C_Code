#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>

//字符串旋转
int cmp_str(char *str,char *cmp_str){
    assert(str);
    int size = strlen(str);
    int sign = 0;
    int i=0;   
    for(i=0;i<size-1;i++){
        if( strcmp(str,cmp_str) == 0) sign=1;
        char temp = *str;
        int j=0;
        for(j=0;j<size;j++){
            *(str+j) = *(str+j+1);
        }
        *(str+size-1) = temp;
    }
    return sign;
}
// int main(){
//     char str1[] = "AABCD";
//     //注意实参是数组类型的，而非是指针类型
//     //char *str = "AABCD";其中 str 是字符常量不可修改
//     char str2[] = "BCDAA";
//     //int ret = cmp_str(str1,str2);
//     //printf("%d\n",ret);
//     return 0;
// }

//2、三步翻转法(给定要翻转的次数)
//self
void _swaq(char *e1,char *e2){
    while(e1<e2){
        char temp = *e1;
        *e1++ = *e2;
        *e2-- = temp;
    }
}
int my_left_move(char *str,int step,char *cmp_str){
    char *mid = str+step-1;
    char *tail = str+strlen(str)-1;
    char *head = str;
    _swaq(head,mid);
    mid = str+step;
    _swaq(mid,tail);
    tail = str+strlen(str)-1;
    head = str;
    _swaq(head,tail);
    printf("%s\n",str);
    if(strcmp(str,cmp_str)==0) return 1;
    else return 0;
}
// int main(){
//     char arr[] = "AABCDEFG";
//     char *cmp_str = "DEFGAABC";
//     printf("%d\n",my_left_move(arr,4,cmp_str));
//     return 0;
// }

//answer
void reverse(char *head,char *tail){
    assert(head!=NULL);
    assert(tail!=NULL);
    while(head<tail){
        char temp = *head;
        *head++ = *tail;
        *tail-- = temp;
    }
}
int left_move(char *str,int step){
    int len = strlen(str);
    assert(step<=len);
    reverse(str,str+step-1);//逆序左边
    reverse(str+step,str+len-1);//逆序右边
    reverse(str,str+len-1);//逆序整体
}
// int main(){
//     char str[] = "AABCDEFG";
//     char *cmp_str = "DEFGAABC";
//     printf("%d\n",left_move(str,4));
//     int ret = strcmp(str,cmp_str);
//     printf("%d\n",ret);
//     return 0;
// }


//三步翻转法
int is_left_move(char *str,char *cmp_str){
    int sign = 0;
    int len = strlen(str);
    int i=0;
    for(i=0;i<len;i++){
        left_move(str,1);
        if( strcmp(str,cmp_str) == 0 ) sign=1;
    }
    return sign;
}
int main(){
    char arr1[]="abcdef";
    char *arr2 = "cdefab";
    int ret = is_left_move(arr1,arr2);
    printf("%d\n",ret);
    return 0;
}


//以上方法均采用的是穷举的思路
//也可以采用KMP算法的思路
int left_move_KMP(char *str,char *cmp_str){
    //一些判断条件
    assert(str!=NULL);
    assert(cmp_str!=NULL);
    assert(strlen(str)==strlen(cmp_str));
    //1、self_function
    //实现在str字符串后面追加一个str字符串(只适用于该种情况)   
    int len = strlen(str);
    *(str+len*2) = '\0';
    int i=0;
    for(i=0;i<len;i++){
        *(str+len+i) = *(str+i);
    }
    //依次比较cmp_str 和 追加过字符串的str
    int str_len = strlen(str);
    int cmp_str_len = strlen(cmp_str);
    i = 0;
    int j = 0;
    int temp = 0;
    while(temp<str_len){
        i = temp;
        j = 0;
        while( !(*(str+i) - *(cmp_str+j)) && *(str+i) && *(cmp_str+j) ){
            i++;
            j++;
        }
        if( !(*(str+i)) ) return 0;     //是子集
        if( !(*(cmp_str+j)) ) return 1; //不是子集
        temp++;
    }
    return 0;
    
    //2、有两个库函数可以实现字符串追加: strcat 和 strncat
    //使用库函数 strcat 可以实现字符串追加，不能用于字符串给自己追加自己，会丢失'\0'  
    //strncat 实现给字符串追加指定个数的字符
    // int len = strlen(str);
    // strncat(str,str,len);
    // //strstr -- 找字串
    // char *ret = strstr(str,cmp_str);
    // if(ret==NULL) return 0;
    // else return 1;
}
int main(){
    char arr1[30] = "abcdefg";
    char arr2[] = "defgabc";
    int ret = left_move_KMP(arr1,arr2);
    printf("%d\n",ret);
    return 0;
}
