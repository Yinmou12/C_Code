#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

int count_bit_one_MF(unsigned int n);
int count_bit_one_MS(int n);
int count_bit_one_MT(int n);
int count_def_Myself(int a, int b);
int get_diff_bit(int, int);
void print(int);
void print_arr(int* p, int len);
void print_table(int n);
void print_int_one(int n);
int print_factorial_r(int n);
int print_factorial(int n);
int my_strlen(char* str);
void reverse_string(char str[]);
void reverse_string_r(char* str);
int DigitSum(unsigned int x);
double my_pow(int x, int y);
int fb(int x);

//二进制数中1的个数
//1、转换为无符号数
int count_bit_one_MF(unsigned int n) {
	int count = 0;
	while (n) {
		if (n % 2 == 1) count++;
		n /= 2;
	}

	return count;
}
//2、n的每一位分别和 1 相与
int count_bit_one_MS(int n) {
	int count = 0;
	int i = 0;
	for (; i < 32; i++) {
		if (((n >> i) & 1) == 1) count++;
	}

	return count;
}
//3、n 和 n-1 相与后赋值给n,直到n=0
int count_bit_one_MT(int n) {
	int count = 0;
	while (n) {
		count++;
		n = n & (n - 1);
	}

	return count;
}


//比较两个数的二进制表示中不同位的个数
//1、
int count_def_Myself(int a, int b) {
	int count = 0;
	int temp1 = a;
	int temp2 = b;
	while (temp1 && temp2) {
		if (temp1 % 2 != temp2 % 2) count++;
		temp1 /= 2;
		temp2 /= 2;
	}

	while (temp1) {
		temp1 /= 2;
		count++;
	}
	while (temp2) {
		temp2 /= 2;
		count++;
	}

	return count;
}
//2、
int get_diff_bit(int m, int n) {
	int temp = m ^ n;
	return count_bit_one_MT(temp);
}


//二进制按奇数位和偶数位分别输出
void print(int x) {
	int i = 0;
	for (i = 30; i >= 0; i -= 2) {
		printf("%d", ((x >> i) & 1));
	}
	printf("\n");

	for (i = 31; i >= 1; i -= 2) {
		printf("%d", ((x >> i) & 1));
	}
	printf("\n");
}

//打印字符串中的每一个字符
void print_arr(int* p, int len) {

	int i = 0;
	for (; i < len; i++) {
		printf("%d ", *(p + i));
	}
}

//打印乘法口诀表
void print_table(int n) {
	int i = 1;
	int j = 1;
	for (; i <= n; i++) {
		for (j = 1; j <= i; j++) {
			printf("%d*%d=%-3d", j, i, j * i);
		}
		printf("\n");
	}
}

//递归实现打印一个整数的每一位
void print_int_one(int n) {

	if (n >= 10) {
		printf("%d ", n % 10);
		print_int_one(n / 10);
	}
	else {
		printf("%d ", n);
	}

}

//递归实现实现n的阶乘
int print_factorial_r(int n) {
	if (n > 1) return n * print_factorial_r(n - 1);
	else return 1;
}

//非递归实现n的阶乘
int print_factorial(int n) {
	int pro = 1;
	int i = 1;
	for (; i <= n; i++) {
		pro *= i;
	}
	return pro;
}

//逆序字符串
int my_strlen(char* str) {
	int len = 0;
	while (*str != '\0') {
		str++;
		len++;
	}
	return len;
}

void reverse_string(char str[]) {
	int left = 0;
	int right = my_strlen(str) - 1;
	while (left < right) {
		int a = str[left];
		str[left] = str[right];
		str[right] = a;
		left++;
		right--;
	}
}

// ************************** 递归逆序字符串 **************************
void reverse_string_r(char* str) {
	char temp = str[0];
	int len = my_strlen(str);
	str[0] = str[len - 1];
	str[len - 1] = '\0';
	if (my_strlen(str + 1) >= 2) reverse_string_r(str + 1);
	str[len - 1] = temp;
}

//递归函数DigitSum,输入一个非负整数，返回组成它的数字的和
int DigitSum(unsigned int x) {
	if (x >= 10) return ((x % 10) + DigitSum(x / 10));
	else return x;
}

double my_pow(int x, int y) {
	if (y < 0) return (1.0 / my_pow(x, -y));
	else if (y == 0) return 1;
	else return x * my_pow(x, y - 1);
}

int fb(int x) {
	if (x == 0) return 0;
	else if (x == 1) return 1;
	else return fb(x - 1) + fb(x - 2);
}
